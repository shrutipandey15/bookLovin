from typing import Any, Protocol, runtime_checkable

from booklovin.models.profile import UserProfile
from booklovin.models.errors import UserError
from booklovin.models.post import Post
from booklovin.models.comments import Comment
from booklovin.models.users import User
from booklovin.models.journals import JournalEntry, JournalEntryUpdate, Mood
from booklovin.models.confessions import Confession, NewConfession
from booklovin.models.books import ShelfItem
from fastapi import FastAPI
from pydantic import BaseModel


@runtime_checkable
class JournalService(Protocol):
    async def create(self, db: Any, entry: JournalEntry, user: User) -> None | UserError: ...
    async def delete(self, db: Any, entry_id: str) -> None | UserError: ...
    async def update(self, db: Any, user: User, entry_id: str, journal_entry: JournalEntryUpdate) -> None | UserError: ...
    # query
    async def query(
        self, db: Any, user_id: str, mood: Mood | None = None, search: str | None = None, favorite: bool | None = None
    ) -> list[JournalEntry] | UserError: ...


@runtime_checkable
class PostService(Protocol):
    async def create(self, db: Any, post: Post) -> None | UserError: ...
    async def delete(self, db: Any, post_id: str) -> None | UserError: ...
    async def update(self, db: Any, post_id: str, post_data: Post) -> None | UserError: ...
    async def exists(self, db: Any, post_id: str) -> bool: ...
    # query
    async def get_one(self, db: Any, post_id: str) -> Post | None: ...
    async def get_all(self, db: Any, start: int, end: int) -> list[Post]: ...
    async def get_recent(self, db: Any, user: User) -> list[Post] | UserError: ...
    async def get_popular(self, db: Any) -> list[Post] | UserError: ...
    # likes
    async def like(self, db: Any, post_id: str, user_id: str) -> None | UserError: ...
    # comments
    async def add_comment(self, db: Any, comment: Comment) -> None | UserError: ...
    async def get_comments(self, db: Any, post_id: str) -> None | UserError | list[Comment]: ...
    async def delete_comment(self, db: Any, post_id: str, comment_id: str) -> None | UserError: ...


@runtime_checkable
class UserService(Protocol):
    async def get(self, db: Any, uid: str | None = None, email: str | None = None) -> User | None: ...
    async def create(self, db: Any, user: User) -> None | UserError: ...


@runtime_checkable
class ConfessionService(Protocol):
    async def create(self, db: Any, user: User, confession: NewConfession) -> Confession: ...
    async def get_all(self, db: Any) -> list[Confession]: ...
    async def get_one(self, db: Any, confession_id: str) -> Confession: ...
@runtime_checkable
class ShelfService(Protocol):
    async def get_user_shelf(self, db: Any, user_id: str) -> list[ShelfItem]: ...
    async def add_book_to_shelf(self, db: Any, user_id: str, item: ShelfItem) -> ShelfItem | UserError: ...
    async def remove_book_from_shelf(self, db: Any, user_id: str, ol_key: str) -> None | UserError: ...

@runtime_checkable
class ProfileService(Protocol):
    async def get_profile_by_username(self, db: Any, username: str) -> UserProfile | UserError: ...
    async def update_user_quote(self, db: Any, user_id: str, quote: str) -> User | UserError: ...

class ServiceSetup(BaseModel):
    async def setup(self, app: FastAPI):
        pass

    async def teardown(self, app: FastAPI):
        pass
